# Generated by Django 2.2.2 on 2019-07-28 23:39

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('agency_url', models.TextField(blank=True, null=True)),
                ('agency_name', models.TextField(blank=True, null=True)),
                ('agency_timezone', models.CharField(blank=True, max_length=45, null=True)),
                ('agency_id', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('agency_lang', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'agency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Apikeys',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'ApiKeys',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('service_id', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('start_date', models.TextField(blank=True, null=True)),
                ('end_date', models.TextField(blank=True, null=True)),
                ('monday', models.TextField(blank=True, null=True)),
                ('tuesday', models.TextField(blank=True, null=True)),
                ('wednesday', models.TextField(blank=True, null=True)),
                ('thursday', models.TextField(blank=True, null=True)),
                ('friday', models.TextField(blank=True, null=True)),
                ('saturday', models.TextField(blank=True, null=True)),
                ('sunday', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'calendar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.TextField(blank=True, null=True)),
                ('start_time', models.TextField(blank=True, null=True)),
                ('end_time', models.TextField(blank=True, null=True)),
                ('temperature', models.TextField(blank=True, null=True)),
                ('cloud_percent', models.TextField(blank=True, null=True)),
                ('rain', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
            ],
            options={
                'db_table': 'forecast',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Routes',
            fields=[
                ('route_id', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('route_type', models.IntegerField(blank=True, null=True)),
                ('route_short_name', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'routes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoutesPerStop',
            fields=[
                ('route_id', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('stop_id', models.IntegerField()),
            ],
            options={
                'db_table': 'routes_per_stop',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Shapes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shape_id', models.TextField(blank=True, null=True)),
                ('shape_pt_lat', models.TextField(blank=True, null=True)),
                ('shape_pt_lon', models.TextField(blank=True, null=True)),
                ('shape_pt_sequence', models.TextField(blank=True, null=True)),
                ('shape_dist_traveled', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'shapes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stops',
            fields=[
                ('stop_lat', models.FloatField(blank=True, null=True)),
                ('zone_id', models.FloatField(blank=True, null=True)),
                ('stop_lon', models.FloatField(blank=True, null=True)),
                ('stop_id', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('stop_name', models.TextField(blank=True, null=True)),
                ('location_type', models.BigIntegerField(blank=True, null=True)),
                ('stopid_short', models.BigIntegerField(blank=True, db_column='stopID_short', null=True)),
                ('here_api', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'stops',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StopTimes',
            fields=[
                ('trip_id', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('arrival_time', models.TimeField(blank=True, null=True)),
                ('departure_time', models.TimeField(blank=True, null=True)),
                ('stop_sequence', models.IntegerField()),
                ('stop_headsign', models.CharField(blank=True, max_length=45, null=True)),
                ('shape_dist_traveled', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'stop_times',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Touristattractions',
            fields=[
                ('name', models.CharField(max_length=75, primary_key=True, serialize=False)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('lon', models.FloatField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=250, null=True)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('raters', models.IntegerField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'TouristAttractions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CalendarDates',
            fields=[
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='backend.Calendar')),
                ('date', models.CharField(max_length=45)),
                ('exception_type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'calendar_dates',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Trips',
            fields=[
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='backend.Routes')),
                ('direction_id', models.IntegerField()),
                ('trip_headsign', models.CharField(blank=True, max_length=100, null=True)),
                ('shape_id', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'trips',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Costs',
            fields=[
                ('origin', models.ForeignKey(db_column='origin', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='origin', serialize=False, to='backend.Touristattractions')),
                ('cost', models.IntegerField(blank=True, null=True)),
                ('destination', models.ForeignKey(db_column='destination', default='dest', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Touristattractions')),
            ],
            options={
                'db_table': 'costs',
                'managed': True,
                'unique_together': {('origin', 'destination')},
            },
        ),
    ]
